// ================================================================
//   SessionSeguroController.cs ‚Äî Controlador (Versi√≥n SEGURO)
// ================================================================
// Este controlador demuestra c√≥mo aplicar un manejo de sesi√≥n seguro
// en ASP.NET Core, siguiendo buenas pr√°cticas:
//
// ‚úî Cookies de sesi√≥n protegidas con HttpOnly, Secure y SameSite.
// ‚úî Tiempo de expiraci√≥n razonable.
// ‚úî Regeneraci√≥n de Session ID al iniciar sesi√≥n.
// ‚úî Logout efectivo que invalida datos y fuerza cierre.
// ================================================================

// ---------------------------------------------------------------
// IMPORTS ‚Äî Espacios de nombres requeridos
// ---------------------------------------------------------------

// Proporciona atributos y clases base para construir controladores REST.
using Microsoft.AspNetCore.Mvc;

namespace EjemploSeguroCapitulo7.Controllers
{
    /// <summary>
    /// Controlador responsable de gestionar operaciones de sesi√≥n segura.
    /// Ruta base: /sessionseguro
    /// 
    /// Incluye:
    /// - Inicio de sesi√≥n con regeneraci√≥n de ID.
    /// - Acceso a perfil protegido.
    /// - Cierre de sesi√≥n efectivo.
    /// </summary>
    [ApiController]
    [Route("sessionseguro")]
    public class SessionSeguroController : ControllerBase
    {
        /// <summary>
        /// Endpoint HTTP POST para iniciar sesi√≥n de forma segura.
        /// Regenera la sesi√≥n para prevenir Session Fixation
        /// y almacena el nombre del usuario en la sesi√≥n.
        /// </summary>
        /// <param name="username">Nombre de usuario recibido por query string.</param>
        /// <returns>Mensaje confirmando inicio de sesi√≥n seguro.</returns>
        [HttpPost("login")]
        public IActionResult Login(string username)
        {
            // üîë Simula regeneraci√≥n de Session ID:
            // Limpiar toda la sesi√≥n fuerza a ASP.NET Core a emitir una cookie nueva.
            HttpContext.Session.Clear();

            // Almacena nombre de usuario en sesi√≥n.
            HttpContext.Session.SetString("Usuario", username);

            return Ok($"Sesi√≥n SEGURA iniciada para {username}.");
        }

        /// <summary>
        /// Endpoint HTTP GET para acceder al perfil protegido.
        /// Solo devuelve informaci√≥n si la sesi√≥n existe y est√° activa.
        /// </summary>
        /// <returns>Perfil del usuario o error 401 si no hay sesi√≥n v√°lida.</returns>
        [HttpGet("perfil")]
        public IActionResult Perfil()
        {
            // Obtiene usuario desde sesi√≥n.
            var usuario = HttpContext.Session.GetString("Usuario");

            if (usuario == null)
                return Unauthorized("Sesi√≥n expirada o no v√°lida.");

            return Ok($"Perfil protegido de {usuario}.");
        }

        /// <summary>
        /// Endpoint HTTP POST para cerrar sesi√≥n de forma segura.
        /// Limpia los datos de sesi√≥n y fuerza a eliminar la cookie en cliente.
        /// </summary>
        /// <returns>Mensaje confirmando cierre de sesi√≥n seguro.</returns>
        [HttpPost("logout")]
        public IActionResult Logout()
        {
            // Limpia datos en servidor.
            HttpContext.Session.Clear();

            return Ok("Sesi√≥n cerrada de forma segura y cookie invalidada.");
        }
    }
}