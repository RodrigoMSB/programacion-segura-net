// --------------------------------------------------------------------------------------------
// üìÑ Program.cs ‚Äî Versi√≥n SEGURA, aplicando buenas pr√°cticas de configuraci√≥n y ejecuci√≥n.
// --------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------
// üìå Importar los espacios de nombres principales de ASP.NET Core.
// - Microsoft.AspNetCore.Builder: Contiene la funcionalidad principal para construir la app web.
// - Microsoft.Extensions.Hosting: Permite identificar y configurar el entorno (Desarrollo, Producci√≥n, etc.).
// - Microsoft.Extensions.DependencyInjection: Proporciona el contenedor de dependencias para registrar servicios.
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;

// --------------------------------------------------------------------------------------------
// üîë Crear el constructor de la aplicaci√≥n web.
// 'WebApplication.CreateBuilder' configura el host, carga la configuraci√≥n y registra los servicios necesarios.
var builder = WebApplication.CreateBuilder(args);

// --------------------------------------------------------------------------------------------
// ‚úÖ BUENA PR√ÅCTICA:
// Obtener la cadena de conexi√≥n desde la configuraci√≥n segura (por ejemplo, variables de entorno, secretos en Key Vault).
// Nunca se incluye directamente en el archivo appsettings.json.
// Si no se encuentra, se muestra un mensaje gen√©rico y NO la cadena real.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") 
    ?? "Connection string not set.";

// üìå Confirmar por consola que se obtuvo la configuraci√≥n de forma segura.
// A diferencia del ejemplo inseguro, aqu√≠ NO se imprime la cadena real para evitar exposici√≥n de datos sensibles.
Console.WriteLine("Conexi√≥n obtenida de configuraci√≥n segura.");

// --------------------------------------------------------------------------------------------
// üìå Registrar el servicio de controladores en el contenedor de inyecci√≥n de dependencias.
// Permite usar rutas y controladores para manejar peticiones HTTP.
builder.Services.AddControllers();

// --------------------------------------------------------------------------------------------
// üîë Construir la aplicaci√≥n con la configuraci√≥n y los servicios definidos.
var app = builder.Build();

// --------------------------------------------------------------------------------------------
// ‚úÖ BUENA PR√ÅCTICA:
// Habilitar redirecci√≥n autom√°tica de HTTP a HTTPS.
// Esto asegura que todas las solicitudes se cifren, protegiendo datos en tr√°nsito contra sniffing o MITM.
app.UseHttpsRedirection();

// üìå Mapear rutas de controladores.
// Aqu√≠ se activan los endpoints HTTP definidos en los controladores de la aplicaci√≥n.
app.MapControllers();

// --------------------------------------------------------------------------------------------
// üîë Ejecutar la aplicaci√≥n.
// Inicia el servidor web y queda a la espera de peticiones en el puerto configurado.
app.Run();